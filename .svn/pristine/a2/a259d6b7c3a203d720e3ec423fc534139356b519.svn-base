package schack;


import java.util.Arrays;

/**
 * Created by eriro331 and antro937 on 2014-03-06.
 */
public class Board
{
    private final int width;
    private final int height;

    private Piece[][] board = null;

    public Board(){
	this.width = 8;
	this.height = 8;
	board = new Piece[8][8];
    }

    public Piece[][] getBoard() {
	return board;
    }

    public Piece getPieceAt(int x, int y){
	return board[x][y];

    }
    public void fillBoard(){
    	//fyller brädet med pjäser första gången

    	//fills with pawns
    	for (int x = 0; x < 8; x++){
    	    Pawn pb1 = new Pawn();
    	    pb1.placePiece(x, 1, PieceColor.BLACK, pb1, board);
    	    Pawn pw1 = new Pawn();
    	    pw1.placePiece(x, 6, PieceColor.WHITE, pw1, board);
    	}
    	//fills with rooks
    	for (int x = 0; x<8; x+=7){
    	    Rook rb1 = new Rook();
    	    rb1.placePiece(x, 0, PieceColor.BLACK, rb1, board);
    	    Rook rw1 = new Rook();
    	    rw1.placePiece(x, 7, PieceColor.WHITE, rw1, board);
    	}
    	//fills with knights
    	for (int x = 1; x<7; x+=5){
    	    Knight kb1 = new Knight();
    	    kb1.placePiece(x, 0, PieceColor.BLACK, kb1, board);
    	    Knight kw1 = new Knight();
    	    kw1.placePiece(x, 7, PieceColor.WHITE, kw1, board);
    	}
    	//fills with bishops
    	for (int x = 2; x<7; x+=3){
    	    Bishop bb1 = new Bishop();
    	    bb1.placePiece(x, 0, PieceColor.BLACK, bb1, board);
    	    Bishop bw1 = new Bishop();
    	    bw1.placePiece(x, 7, PieceColor.WHITE, bw1, board);
    	}
    	King kingBlack = new King();
    	kingBlack.placePiece(4,0,PieceColor.BLACK,kingBlack, board);
    	King kingWhite = new King();
    	kingWhite.placePiece(4,7,PieceColor.WHITE,kingWhite, board);

    	Queen queenBlack = new Queen();
    	queenBlack.placePiece(3,0,PieceColor.BLACK,queenBlack, board);
    	Queen queenWhite = new Queen();
    	queenWhite.placePiece(3,7,PieceColor.WHITE,queenWhite, board);

        }


    public int getWidth() {
	return width;
    }

    public int getHeight() {
	return height;
    }

    @Override public String toString() {
	return "Board{" +
	       "board=" + Arrays.deepToString(board) + "\n" +
	       "}\n";
    }
}
