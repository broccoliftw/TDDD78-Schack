package schack;

/**
 * Created by eriro331 on 2014-03-06.
 */
public abstract class AbstractPiece implements Piece
{
    private int x;
    private int y;
    private PieceColor pieceColor;

    public int getX() {
	return x;
    }

    public int getY() {
	return y;
    }

    public PieceColor getPieceColor() {
	return pieceColor;
    }

    public void setX(final int x) {
	this.x = x;
    }

    public void setY(final int y) {
	this.y = y;
    }

    public void setPieceColor(final PieceColor pieceColor) {
	this.pieceColor = pieceColor;
    }

    public void placePiece(int x, int y, PieceColor color, Piece piece, Piece[][] board) {
	this.x = x;
	this.y = y;
	this.pieceColor = color;
	board[x][y] = piece;
    }

    public void movePiece(final int oldX, final int oldY, final int newX, final int newY, final PieceColor color, Board board) {

	if (board.getPieceAt(oldX, oldY).isMoveLegal(oldX, oldY, newX, newY, color, board)) {

	    board.setPieceAt(newX, newY, (board.getPieceAt(oldX, oldY)));
	    board.setPieceAt(oldX, oldY, null);

	}
    }

    public boolean checkCollision(final int oldX, final int oldY, final int newX, final int newY, Board board) {
	int leftRight = newX - oldX;
	int upDown = newY - oldY;
	if (leftRight > 0) {//right
	    for (int i = oldX + 1; i < newX; i++) {
		if (board.getPieceAt(i, oldY) != null) {
		    return true;//collision
		}
	    }
	    return false;
	} else if (leftRight < 0) {//left
	    for (int i = oldX - 1; i > newX; i--) {
		if (board.getPieceAt(i, oldY) != null) {
		    return true;//collision
		}
	    }
	    return false;

	} else if (upDown > 0) {//down
	    for (int i = oldY + 1; i < newY; i++) {
		if (board.getPieceAt(oldX, i) != null) {
		    return true;//collision
		}
	    }
	    return false;
	} else if (upDown < 0) {//up
	    for (int i = oldY - 1; i > newY; i--) {
		if (board.getPieceAt(oldX, i) != null) {
		    return true;//collision
		}
	    }
	    return false;

	}
	System.out.println("fail");
	return false;
    }

    public boolean checkCollisionDiagonal(final int oldX, final int oldY, final int newX, final int newY, Board board) {
	int kx = newX - oldX;
	int ky = newY - oldY;
	if (ky > 0 && kx > 0) {// right down
	    for (int i = 1; i + oldY < newY; i++) {
		if (board.getPieceAt(oldX + i, oldY + i) != null) {
		    return true;//collision
		}
	    }
	    return false;
	} else if (ky > 0 && kx < 0) {//left down
	    for (int i = 1; i + oldY < newY; i++) {
		if (board.getPieceAt(oldX - i, oldY + i) != null) {
		    return true;//collision
		}
	    }
	    return false;
	} else if (ky < 0 && kx < 0) {//left up
	    for (int i = 1; oldY - i > newY; i++) {
		if (board.getPieceAt(oldX - i, oldY - i) != null) {
		    return true;//collision
		}
	    }
	    return false;
	} else if (ky < 0 && kx > 0) {//right up
	    for (int i = 1; oldY - i > newY; i++) {
		if (board.getPieceAt(oldX + i, oldY - i) != null) {
		    return true;//collision
		}
	    }
	    return false;
	}
	System.out.println("fail");
	return false;
    }
}
