package schack;


import java.util.ArrayList;
import java.util.List;

/**
 * Created by eriro331 and antro937 on 2014-03-06.
 */
public class Board
{
    private final int width;
    private final int height;
    private final static int BOARDSIZE = 8;
    private static final int SQUARE_SIZE = 60;
    private final List<BoardListener> listenersLists;
    private PieceColor turn = PieceColor.WHITE;
    private Piece kingWhitePointer = null;
    private Piece kingBlackPointer = null;

    private Piece[][] board = null;

    public Board() {
	this.width = BOARDSIZE;
	this.height = BOARDSIZE;
	board = new Piece[BOARDSIZE][BOARDSIZE];
	listenersLists = new ArrayList<>();
    }


    public Piece getPieceAt(int x, int y) {
	return board[x][y];
    }

    public void setPieceAt(int x, int y, Piece piece) {
	if (piece != null){
	    piece.setX(x);
	    piece.setY(y);
	}
	board[x][y] = piece;
    }

    public void addBoardListener(BoardListener bl) {
        listenersLists.add(bl);
    }

    public void notifyListeners() {

	for (BoardListener listenersList : listenersLists) {
	    listenersList.boardChanged();

	}
    }

    public void placePiece(int x, int y, PieceColor color, Piece piece) {
    	piece.setX(x);
	piece.setY(y);
    	piece.setPieceColor(color);
    	board[x][y] = piece;
        }

    public void fillBoard() {
	//fills the board with the pieces in starting location

	//fills with pawns
	for (int x = 0; x < 8; x++) {

	    placePiece(x, 1, PieceColor.BLACK, new Pawn());
	    placePiece(x, 6, PieceColor.WHITE, new Pawn());
	}
	//fills with rooks
	for (int x = 0; x < 8; x += 7) {
	   placePiece(x, 0, PieceColor.BLACK, new Rook());
	   placePiece(x, 7, PieceColor.WHITE, new Rook());
	}
	//fills with knights
	for (int x = 1; x < 7; x += 5) {
	    placePiece(x, 0, PieceColor.BLACK, new Knight());
	    placePiece(x, 7, PieceColor.WHITE, new Knight());
	}
	//fills with bishops
	for (int x = 2; x < 7; x += 3) {
	    placePiece(x, 0, PieceColor.BLACK, new Bishop());
	    placePiece(x, 7, PieceColor.WHITE, new Bishop());
	}
	King kingBlack = new King();
	this.kingBlackPointer = kingBlack;
	placePiece(4, 0, PieceColor.BLACK, kingBlack);

	King kingWhite = new King();
	this.kingWhitePointer = kingWhite;
	placePiece(4, 7, PieceColor.WHITE, kingWhite);

	placePiece(3, 0, PieceColor.BLACK, new Queen());
	placePiece(3, 7, PieceColor.WHITE, new Queen());

    }

    public void moveRequest(int oldX, int oldY, int newX, int newY,Board myboard){
	oldX = (int)Math.floor((float)oldX/SQUARE_SIZE);
	oldY = (int)Math.floor((float)oldY/SQUARE_SIZE);
	newX = (int)Math.floor((float)newX/SQUARE_SIZE);
	newY = (int)Math.floor((float)newY/SQUARE_SIZE);
	if (newX < width &&  newY < height && oldX < width &&  oldY < height){
	Piece thePiece = getPieceAt(oldX,oldY);
	if (thePiece != null){
	thePiece.movePiece(oldX,oldY,newX,newY,myboard);
	}
	}
    }

    public int getWidth() {
	return width;
    }

    public int getHeight() {
	return height;
    }

    public PieceColor getTurn() {
	return turn;
    }

    public void setTurn(final PieceColor turn) {
	this.turn = turn;
    }
    /*@Override public String toString() {
 	       	return "Board{" +
    	           	       "board=" + Arrays.deepToString(board) + "\n" +
    	           	       "}\n";
        }*/

    public Piece getKingWhitePointer() {
	return kingWhitePointer;
    }

    public Piece getKingBlackPointer() {
	return kingBlackPointer;
    }
}
